// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: server.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerRPCClient is the client API for ServerRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerRPCClient interface {
	FwdOnions(ctx context.Context, opts ...grpc.CallOption) (ServerRPC_FwdOnionsClient, error)
}

type serverRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewServerRPCClient(cc grpc.ClientConnInterface) ServerRPCClient {
	return &serverRPCClient{cc}
}

func (c *serverRPCClient) FwdOnions(ctx context.Context, opts ...grpc.CallOption) (ServerRPC_FwdOnionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServerRPC_ServiceDesc.Streams[0], "/rpc.ServerRPC/FwdOnions", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverRPCFwdOnionsClient{stream}
	return x, nil
}

type ServerRPC_FwdOnionsClient interface {
	Send(*OnionMsg) error
	CloseAndRecv() (*FwdOnionsRes, error)
	grpc.ClientStream
}

type serverRPCFwdOnionsClient struct {
	grpc.ClientStream
}

func (x *serverRPCFwdOnionsClient) Send(m *OnionMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serverRPCFwdOnionsClient) CloseAndRecv() (*FwdOnionsRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FwdOnionsRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerRPCServer is the server API for ServerRPC service.
// All implementations must embed UnimplementedServerRPCServer
// for forward compatibility
type ServerRPCServer interface {
	FwdOnions(ServerRPC_FwdOnionsServer) error
	mustEmbedUnimplementedServerRPCServer()
}

// UnimplementedServerRPCServer must be embedded to have forward compatible implementations.
type UnimplementedServerRPCServer struct {
}

func (UnimplementedServerRPCServer) FwdOnions(ServerRPC_FwdOnionsServer) error {
	return status.Errorf(codes.Unimplemented, "method FwdOnions not implemented")
}
func (UnimplementedServerRPCServer) mustEmbedUnimplementedServerRPCServer() {}

// UnsafeServerRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerRPCServer will
// result in compilation errors.
type UnsafeServerRPCServer interface {
	mustEmbedUnimplementedServerRPCServer()
}

func RegisterServerRPCServer(s grpc.ServiceRegistrar, srv ServerRPCServer) {
	s.RegisterService(&ServerRPC_ServiceDesc, srv)
}

func _ServerRPC_FwdOnions_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServerRPCServer).FwdOnions(&serverRPCFwdOnionsServer{stream})
}

type ServerRPC_FwdOnionsServer interface {
	SendAndClose(*FwdOnionsRes) error
	Recv() (*OnionMsg, error)
	grpc.ServerStream
}

type serverRPCFwdOnionsServer struct {
	grpc.ServerStream
}

func (x *serverRPCFwdOnionsServer) SendAndClose(m *FwdOnionsRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serverRPCFwdOnionsServer) Recv() (*OnionMsg, error) {
	m := new(OnionMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerRPC_ServiceDesc is the grpc.ServiceDesc for ServerRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.ServerRPC",
	HandlerType: (*ServerRPCServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FwdOnions",
			Handler:       _ServerRPC_FwdOnions_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "server.proto",
}
